name: PUB WITH BUN
run-name: PUB triggered by ${{ github.actor }}

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: oven-sh/setup-bun@v2
      with:
        bun_version: "canary"
    - name: Setup SSH
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_ADDR: ${{ secrets.SSH_ADDR }}
      run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          ssh-agent -s > ~/.ssh/ssh-agent.env
          . ~/.ssh/ssh-agent.env
          echo "$SSH_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ssh-add /tmp/ssh_key
          ssh-keyscan -H "$SSH_ADDR" >> ~/.ssh/known_hosts
          ssh-add -l
            
    - name: Install dependencies
      run: |
        bun install -f

    - name: Build project
      run: |
        bun run web:build

    - name: Deploy to remote server
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_ADDR: ${{ secrets.SSH_ADDR }}
      run: |
         ssh -vvv -i /tmp/ssh_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=no "$SSH_USER@$SSH_ADDR" "echo 'SSH Connection Successful'"

  server:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_ADDR: ${{ secrets.SSH_ADDR }}
        run: |
          # Start ssh-agent and ensure .ssh directory exists
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          ssh-agent -s > ~/.ssh/ssh-agent.env
          . ~/.ssh/ssh-agent.env
          echo "$SSH_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ssh-add /tmp/ssh_key
          ssh-keyscan -H "$SSH_ADDR" >> ~/.ssh/known_hosts
          ssh-add -l
          
      - name: Restart Remote 
        run: |
              ssh -i /tmp/ssh_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=no "$SSH_USER@$SSH_ADDR" << EOF
                SERVICE="web"
                if systemctl is-active --quiet "$SERVICE"; then
                  echo "Service $SERVICE is running. Stopping it..."
                  sudo systemctl stop "$SERVICE"
                else
                  echo "Service $SERVICE is not running."
                fi
                echo "Starting $SERVICE..."
                sudo systemctl start "$SERVICE"
                if systemctl is-active --quiet "$SERVICE"; then
                  echo "Service $SERVICE restarted successfully."
                else
                  echo "Failed to restart $SERVICE."
                  exit 1
                fi
              EOF
